// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  itineraries    Itinerary[]    @relation("OwnerItineraries")
  collaborating  Collaborator[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Itinerary {
  id            String         @id @default(cuid())
  title         String
  startDate     DateTime
  endDate       DateTime
  description   String?        @db.Text
  imageUrl      String? // URL de la imagen
  isPublic      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ownerId       String
  owner         User           @relation("OwnerItineraries", fields: [ownerId], references: [id])
  flights       Flight[]
  lodgings      Lodging[]
  activities    Activity[]
  collaborators Collaborator[]
  notes         Note[]
}

model Flight {
  id           String    @id @default(cuid())
  airline      String
  flightNumber String
  departure    DateTime
  arrival      DateTime
  fromAirport  String
  toAirport    String
  price        Float?
  notes        String?   @db.Text
  itineraryId  String
  itinerary    Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Lodging {
  id          String    @id @default(cuid())
  name        String
  address     String
  checkIn     DateTime
  checkOut    DateTime
  price       Float?
  notes       String?   @db.Text
  itineraryId String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Activity {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  location    String?
  startTime   DateTime
  endTime     DateTime?
  price       Float?
  notes       String?   @db.Text
  votes       Vote[]
  itineraryId String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Collaborator {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  itineraryId String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  role        String    @default("EDITOR") // EDITOR, VIEWER
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, itineraryId])
}

model Vote {
  id         String   @id @default(cuid())
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId     String
  value      Int      @default(1) // 1 for upvote, -1 for downvote
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([activityId, userId])
}

model Note {
  id          String    @id @default(cuid())
  content     String    @db.Text
  itineraryId String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
